schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

scalar ByteArray
scalar Date

type Subscription {
    fileMetadata(fileSearch: FileSearch): FileMetadata
    files(fileSearch: FileSearch): FileChangeEvent
}

input MimeType {
    type: String!
    value: String!
}

input FileSearch {
    fileId: ID
    path: String
    fileName: String
    fileType: MimeType
}

type FilePathMetadata @key(fields: "id") {
    id: ID!
    enumerateFiles: [FileMetadata]
    getFileCurrentState(id: ID!): FileMetadata
}

type FileMetadata @extends @key(fields: "id") {
    id: ID! @external
    name: String!
    path: String!
    size: Int!
    lastModified: Date!
    changeType: FileChangeType!
}

input FileChangeEventInput {
    fileId: ID!
    changeType: FileChangeType!
    offset: Int!
    data: ByteArray
    path: String
    length: Int
}

type FileChangeEvent {
    fileId: ID
    changeType: FileChangeType
    offset: Int
    data: ByteArray
    path: String
}

enum FileChangeType {
    CREATED
    REMOVE_CONTENT
    ADD_CONTENT
    DELETED
    EXISTING
}

type Mutation {
    update(fileChangeEvent: FileChangeEventInput): FileMetadata
}
